{"version":3,"sources":["Components/TodoItems.js","Components/Todo.js","Components/Layouts/Header.js","Components/Adding.js","App.js","serviceWorker.js","index.js"],"names":["TodoItem","getStyle","backgroundColor","color","padding","borderBottom","this","props","todo","id","title","style","type","value","onClick","delTod","bind","btnStyle","Component","border","outline","borderRadius","float","Todos","todos","map","key","headerStyles","display","justifyContent","Header","Add","state","onChange","e","setState","target","name","onSubmit","preventDefault","Adding","flex","placeholder","className","App","uuid","v4","currentSubject","completed","cursor","filter","newTodo","Todo","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6QACMA,E,2MACFC,SAAW,WACT,MAAO,CACHC,gBAAgB,OAChBC,MAAM,OACNC,QAAQ,OACRC,aAAa,mB,wEAGT,IAAD,EACeC,KAAKC,MAAMC,KAAxBC,EADF,EACEA,GAAIC,EADN,EACMA,MACX,OACI,yBAAKC,MAAOL,KAAKL,YACb,2BACA,2BAAOW,KAAK,WAAWC,MAAM,KAD7B,IACmC,GAClCH,EACD,4BAAQI,QAAUR,KAAKC,MAAMQ,OAAOC,KAAKV,KAAMG,GAAKE,MAAOM,GAA3D,W,GAhBOC,aAuBjBD,EAAW,CACbf,gBAAgB,UAChBC,MAAM,OACNgB,OAAO,OACPC,QAAQ,OACRhB,QAAQ,WACRiB,aAAa,MACbC,MAAM,SAGKtB,ICzBAuB,E,iLAND,IAAD,OACL,OAAOjB,KAAKC,MAAMiB,MAAMC,IAAI,SAACjB,GAAD,OACzB,kBAAC,EAAD,CAAUkB,IAAKlB,EAAKC,GAAID,KAAMA,EAAMO,OAAQ,EAAKR,MAAMQ,e,GAH9CG,aCQnB,IAAMS,EAAc,CAChBC,QAAQ,OACRC,eAAe,SACfzB,QAAQ,OACRF,gBAAgB,WAEL4B,EAff,WACI,OACI,4BAAQnB,MAAOgB,GACX,4C,QCwBEI,E,2MA1BXC,MAAQ,CACJtB,MAAM,I,EAGVuB,SAAW,SAACC,GACR,EAAKC,SAAL,eAAgBD,EAAEE,OAAOC,KAAOH,EAAEE,OAAOvB,S,EAE7CyB,SAAW,SAACJ,GACRA,EAAEK,iBACF,EAAKhC,MAAMiC,OAAO,EAAKR,MAAMtB,OAC7B,EAAKyB,SAAS,CAAEzB,MAAO,M,wEAGvB,OAAO,0BAAM4B,SAAWhC,KAAKgC,SAAU3B,MAAO,CAACiB,QAAQ,SACnD,2BAAOhB,KAAK,GAAGD,MAAO,CAAC8B,KAAK,KAAMrC,QAAS,OAC/CiC,KAAK,QACLK,YAAY,WACZ7B,MAAOP,KAAK0B,MAAMtB,MAClBuB,SAAU3B,KAAK2B,WACf,2BAAOrB,KAAK,SACZC,MAAM,SAAS8B,UAAU,MAAMhC,MAAO,CAAC8B,KAAM,Y,GArBnCvB,a,wBCyDH0B,E,2MAlDXZ,MAAQ,CACJR,MAAO,CACH,CACIf,GAAGoC,IAAKC,KACRpC,MAAM,cACN2B,KAAK,QACLU,eAAe,WACfC,UAAU,QAGd,CACIvC,GAAGoC,IAAKC,KACRpC,MAAM,wBACN2B,KAAK,SACLU,eAAe,QACfC,UAAU,SAGd,CACIvC,GAAGoC,IAAKC,KACRpC,MAAM,mCACN2B,KAAK,SACLU,eAAe,QACfC,UAAU,QACVC,OAAO,a,EAKnBlC,OAAS,SAACN,GACT,EAAK0B,SAAS,CAACX,MAAM,YAAK,EAAKQ,MAAMR,MAAM0B,OAAO,SAAA1C,GAAI,OAAIA,EAAKC,KAAMA,Q,EAEtE+B,OAAS,SAAC9B,GACN,IAAMyC,EAAU,CACZ1C,GAAGoC,IAAKC,KACRpC,SAEN,EAAKyB,SAAS,CAACX,MAAM,GAAD,mBAAM,EAAKQ,MAAMR,OAAjB,CAAwB2B,O,wEAG1C,OACI,yBAAKR,UAAU,aACX,kBAAC,EAAD,MACA,kBAACH,EAAD,CAAQA,OAAQlC,KAAKkC,SACrB,kBAACY,EAAD,CAAO5B,MAAOlB,KAAK0B,MAAMR,MAAQT,OAAQT,KAAKS,c,GA7C5CG,aCKEmC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.e0ae7028.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nclass TodoItem extends Component {\r\n    getStyle = () =>{\r\n      return {\r\n          backgroundColor:\"#555\",\r\n          color:\"#eee\",\r\n          padding:\"10px\",\r\n          borderBottom:\"1px solid #f90\",\r\n      }\r\n    }\r\n    render() { \r\n        const {id, title} = this.props.todo;\r\n        return ( \r\n            <div style={this.getStyle()}>\r\n                <p>\r\n                <input type=\"checkbox\" value=\"\"/> {''}\r\n                {title}\r\n                <button onClick ={this.props.delTod.bind(this, id)} style={btnStyle}>x</button>\r\n                </p>\r\n            </div>\r\n         );\r\n    }\r\n}\r\n\r\nconst btnStyle = {\r\n    backgroundColor:\"#ff0000\",\r\n    color:\"#fff\",\r\n    border:\"none\",\r\n    outline:\"none\",\r\n    padding:\"8px 16px\",\r\n    borderRadius:\"10%\",\r\n    float:\"right\"\r\n}\r\n\r\nexport default TodoItem;","import React, { Component } from 'react';\r\nimport TodoItem from './TodoItems';\r\nclass Todos extends Component {\r\n    render() { \r\n        return this.props.todos.map((todo) => (\r\n           <TodoItem key={todo.id} todo={todo} delTod={this.props.delTod}/>\r\n        ));\r\n    }\r\n}\r\nexport default Todos;"," import React from 'react';\r\n function Header() {\r\n     return (\r\n         <header style={headerStyles}>\r\n             <h1>Hello list</h1>\r\n         </header>\r\n     )\r\n }\r\n\r\n\r\n const headerStyles ={\r\n     display:\"flex\",\r\n     justifyContent:\"center\",\r\n     padding:\"10px\",\r\n     backgroundColor:\"#ff6666\",\r\n }\r\n export default Header;","import React, { Component } from 'react'\r\nclass Add extends Component {\r\n    state = {\r\n        title:\"\"\r\n    }\r\n\r\n    onChange = (e) =>{\r\n        this.setState({[e.target.name]: e.target.value })\r\n    }\r\n    onSubmit = (e) =>{\r\n        e.preventDefault();\r\n        this.props.Adding(this.state.title);\r\n        this.setState({ title: \"\"})\r\n    }\r\n    render() {\r\n        return <form onSubmit ={this.onSubmit} style={{display:\"flex\"}} >\r\n            <input type=\"\" style={{flex:'10', padding: '5px'}}\r\n        name=\"title\" \r\n        placeholder=\"Add todo\" \r\n        value={this.state.title}\r\n        onChange={this.onChange}/>\r\n        <input type=\"submit\"  \r\n        value=\"submit\" className=\"btn\" style={{flex: '1'}}/>\r\n        </form>\r\n   \r\n    }\r\n}\r\n\r\nexport default Add","import React, { Component } from 'react';\nimport Todos from \"./Components/Todo\"\nimport \"./Components/TodoItems\"\nimport Header from \"./Components/Layouts/Header\"\nimport Adding from \"./Components/Adding\"\nimport \"./App.css\"\nimport uuid from \"uuid\"\nclass App extends Component {\n    state = { \n        todos: [\n            {\n                id:uuid.v4(),\n                title:\"hello todos\",\n                name:\"Moses\",\n                currentSubject:\"React Js\",\n                completed:\"true\"\n            },\n\n            {\n                id:uuid.v4(),\n                title:\"i will rock you React\",\n                name:\"Unkown\",\n                currentSubject:\"React\",\n                completed:\"false\"\n            },\n\n            {\n                id:uuid.v4(),\n                title:\"Because i have a passion for you\",\n                name:\"Moses3\",\n                currentSubject:\"React\",\n                completed:\"false\",\n                cursor:\"pointer\"\n            }\n        ]\n     }\n     \n    delTod = (id) =>{\n     this.setState({todos: [...this.state.todos.filter(todo => todo.id !==id)]})\n    }\n    Adding = (title) =>{\n        const newTodo = {\n            id:uuid.v4(),\n            title,\n        }\n      this.setState({todos: [...this.state.todos, newTodo]})\n    }\n    render() { \n        return ( \n            <div className=\"container\">\n                <Header />\n                <Adding Adding={this.Adding}/>\n                <Todos todos={this.state.todos}  delTod={this.delTod}/>\n            </div>\n         );\n    }\n}\n \nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}